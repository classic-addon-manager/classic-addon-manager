// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as api$0 from "../api/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as shared$0 from "../shared/models.js";

/**
 * @param {string[]} names
 * @returns {Promise<{ [_: string]: api$0.Release }> & { cancel(): void }}
 */
export function CheckAddonUpdatesBulk(names) {
    let $resultPromise = /** @type {any} */($Call.ByID(3854680777, names));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<shared$0.AddonManifest[]> & { cancel(): void }}
 */
export function GetAddonManifest() {
    let $resultPromise = /** @type {any} */($Call.ByID(1299347432));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} name
 * @returns {Promise<api$0.Release> & { cancel(): void }}
 */
export function GetLatestRelease(name) {
    let $resultPromise = /** @type {any} */($Call.ByID(3922659715, name));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<shared$0.AddonManifest[]> & { cancel(): void }}
 */
export function GetSubscribedAddons() {
    let $resultPromise = /** @type {any} */($Call.ByID(3294691374));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {shared$0.AddonManifest} ad
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function InstallAddon(ad) {
    let $resultPromise = /** @type {any} */($Call.ByID(699642360, ad));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = api$0.Release.createFrom;
const $$createType1 = $Create.Map($Create.Any, $$createType0);
const $$createType2 = shared$0.AddonManifest.createFrom;
const $$createType3 = $Create.Array($$createType2);
