// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../time/models.js";

export class Addon {
    /**
     * Creates a new Addon instance.
     * @param {Partial<Addon>} [$$source = {}] - The source object to create the Addon.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("alias" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["alias"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("version" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["version"] = "";
        }
        if (!("commit" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["commit"] = "";
        }
        if (!("author" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["author"] = "";
        }
        if (!("repo" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["repo"] = "";
        }
        if (!("isManaged" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["isManaged"] = false;
        }
        if (!("updatedAt" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["updatedAt"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Addon instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Addon}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Addon(/** @type {Partial<Addon>} */($$parsedSource));
    }
}

export class AddonManifest {
    /**
     * Creates a new AddonManifest instance.
     * @param {Partial<AddonManifest>} [$$source = {}] - The source object to create the AddonManifest.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("alias" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["alias"] = "";
        }
        if (!("dependencies" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["dependencies"] = [];
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("author" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["author"] = "";
        }
        if (!("repo" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["repo"] = "";
        }
        if (!("branch" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["branch"] = "";
        }
        if (!("tags" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["tags"] = [];
        }
        if (!("downloads" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["downloads"] = 0;
        }
        if (!("like_percentage" in $$source)) {
            /**
             * @member
             * @type {number | null}
             */
            this["like_percentage"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | null | undefined}
             */
            this["kofi"] = null;
        }
        if (!("added_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["added_at"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AddonManifest instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AddonManifest}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType0;
        const $$createField7_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("dependencies" in $$parsedSource) {
            $$parsedSource["dependencies"] = $$createField2_0($$parsedSource["dependencies"]);
        }
        if ("tags" in $$parsedSource) {
            $$parsedSource["tags"] = $$createField7_0($$parsedSource["tags"]);
        }
        return new AddonManifest(/** @type {Partial<AddonManifest>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
